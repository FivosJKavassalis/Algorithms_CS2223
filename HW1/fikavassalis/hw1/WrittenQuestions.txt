<<Fivos Kavassalis>>
HW1
Written Questions

Stack Experiments:
------------------

1. I ran the program on the input "( 6 + 8 )" and got an output of "14.0". The output is 14 because 6 + 8 = 14 , and both the operation stack and the values stack is empty when the program terminates. 
2. I ran the program on the input "-99" and got an output of "-99.0". The output is -99.0 because -99=-99.0 (No further operation happened) , and both the operation stack and the values stack is empty when the program terminates.
3. I ran the program on the input "- 99" and got an output of "99.0". The output is 99.0 because the program considers the operation unfinished, because there is a space in-between the number and the dash. Also, the operation stack has one value (-). The values stack is empty when the program terminates.
4. I ran the program on the input "( ( 2 / 3 ) + ( 3 * 7 ) )" and got an output of "21.666666666666668". The output is 21.666666666666668 because ((2 / 3) + (3 * 7)) = 21.666666666666668 , and both the operation stack and the values stack is empty when the program terminates. 
5. I ran the program on the input "( 2 + ( 3 + ) 4 )" and got an output of "9.0". The output is 9.0 because (2 + ( 3 + ) 4) = 9 (The two parentheses between " 3 + " help in producing the mathematically correct result. Without those parentheses we get the value 7.0 since pop() is not called for all the numbers in the stack) , and both the operation stack and the values stack is empty when the program terminates. 
6. I ran the program on the input "( floor ( 5 ^ 0.5 ) )" and got an output of "2.0". The output is 2 because the square root of 5 is approximately 2.23 so the largest integer less than (or equal to) this value is 2, and both the operation stack and the values stack is empty when the program terminates. 


Binary Array Search Exercise:
------------------
 1.

	 void locateSpecial(int[][] Shape) { // function takes in a 2D array which is the board of numbers
	 	int specialVal;
		int[] firstRow = new int[] {}; // Initializing an array that takes in all the values of the first row of the board
		for(int c=0; c<length(); c++) {  
			firstRow.add(Shape[0][c]);
		}
		
		// Trying to locate special value (using binary array search) in second row, 
		// since it will be the only number that will be both in the first and second row (duplicate)
	
		for(int i=0; i<firstRow.length; i++) { // the number of columns for the first row (length) is equal to the number of columns for the second row
			int low = 0;
			int high = firstRow.length-1; // second row has same number of columns as first row

			while (low <= high) {
				int mid = (low+high)/2;

				int rc = Shape[1][mid] - firstRow[i];
				if (rc < 0) {
					low = mid+1;
				} else if (rc > 0) {
					high = mid-1;
				} else {
					StdOut.print("Special value is %d \n" ,  Shape[1][mid]);     // Print out special value as requested from the problem
					specialVal = Shape[1][mid];  // save special value in order to use it to find the positions of this value in each row 
				}
			}
		}	
		
		position(Shape, specialVal); // method that was created in order to find the position of the
									 // special value in each row -- Defined below

	}	 

  void position(int[][] Shape, int specialValue) { // function takes in a 2D array which is the board of the numbers and 
												 // the special value that was found with the locate() method above

	int[] positions = new int[] {}; // Initializing an array that will output the positions of the special value in each row
	
	for(r=0; r<Shape.length; r++) { // Using binary array search to find the specific column of 
									// the special value is located, in each row
		int low = 0;
		int high = Shape[0].length-1;

		while (low <= high) {
			int mid = (low+high)/2;

			int rc = Shape[r][mid] - specialValue;
			if (rc < 0) {
				low = mid+1;
			} else if (rc > 0) {
				high = mid-1;
			} else {
				positions.add(r);
				positions.add(mid);
			}
		}
	}
	
	stdOut.print("Located: ")  // Print out the locations of the special value in each row, as requested in the problem
	for(int j=0; j<positions.length; j++) {
		stdOut.print("(%d,%d) ", positions[j], positions[j+1]);
	}
	
  }	
	2. Worst case is N*log(N) + M*log(N) = (N + M)*log(N) (log2 of N), since I am doing a binary array search n times (number of numbers/columns from first row) 
	   in one row to find the special value and then I am doing a binary array search in M rows to find all the positions of the special value (1 position in each row).
	   
	3. SAMPLE 6X4 ARRAY FOR WORST CASE:
	
		5 22 18 12 
		2 10 70 12
 		1  3  9 12
	   76 17 24 12
		8 11 19 12
		7 51 49 12
		
	4. SAMPLE 6X4 ARRAY FOR WORST CASE:
	
	   12  5 18 22 
		2 12 70 10
 		1 12  9  3
	   76 12 24 17
		8 12 19 11
		7 12 49 51
	
	   